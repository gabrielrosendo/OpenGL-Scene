void drawCylinder(float radius, float height, int slices) {
    GLUquadricObj *quadObj = gluNewQuadric();
    gluQuadricDrawStyle(quadObj, GLU_FILL);
    gluCylinder(quadObj, radius, radius, height, slices, 1);
    gluDeleteQuadric(quadObj);
}


void drawCone(float radius, float height, int slices) {
    GLUquadricObj *quadObj = gluNewQuadric();
    gluQuadricDrawStyle(quadObj, GLU_FILL);
    gluCylinder(quadObj, radius, 0, height, slices, 1);
    gluDeleteQuadric(quadObj);
}

void drawTree() {
    // Position the tree to the left of the building
    glPushMatrix();
    glTranslatef(-1.2f, -1.0f, 0.0f);  

    // Draw the trunk
    glColor3f(0.55f, 0.27f, 0.07f);  // Brown color
    glPushMatrix();
    glRotatef(-90, 1.0f, 0.0f, 0.0f);  // Rotate to make the cylinder vertical
    drawCylinder(0.05f, 0.6f, 10);  // Doubled size
    glPopMatrix();

    // Draw the foliage (three cones of different sizes)
    glColor3f(0.0f, 0.5f, 0.0f);  // Green color
    glPushMatrix();
    glTranslatef(0.0f, 0.3f, 0.0f);  // Adjusted to match the height of the trunk
    glRotatef(-90, 1.0f, 0.0f, 0.0f);  // Rotate to make the cones vertical
    drawCone(0.15f, 0.3f, 10);  // Doubled size
    glTranslatef(0.0f, 0.0f, 0.25f);  // Adjusted to match the new size
    drawCone(0.2f, 0.4f, 10);  // Doubled size
    glTranslatef(0.0f, 0.0f, 0.2f);  // Adjusted to match the new size
    glPopMatrix();

    glPopMatrix();
}

void drawBrickWall() {
    // Set the color to brown for the bricks
    glColor3f(0.4f, 0.2f, 0.0f);

    // Dimensions of the wall
    float wall_left = -0.8f;  // Align with the left pillar
    float wall_right = 0.95f; // Align with the right pillar
    float wall_bottom = -1.0f;
    float wall_top = -0.8f;
    float z = -0.05f; // Slightly behind the building front face

    // Brick dimensions
    float brick_width = 0.05f;
    float brick_height = 0.025f;
    float mortar_thickness = 0.005f;

    int count = 0;

    // Draw the bricks
    for (float y = wall_bottom; y < wall_top; y += brick_height + mortar_thickness) {
        count++;
        bool is_offset_row = (count % 2) == 1;

        for (float x = wall_left; x < wall_right; x += brick_width + mortar_thickness) {
            float x_offset = is_offset_row ? -(brick_width / 2) : 0.0f;

            // Draw a single brick
            glBegin(GL_QUADS);
                glVertex3f(x + x_offset, y, z);
                glVertex3f(x + x_offset + brick_width, y, z);
                glVertex3f(x + x_offset + brick_width, y + brick_height, z);
                glVertex3f(x + x_offset, y + brick_height, z);
            glEnd();
        }
    }
}

// Display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Reset transformations
    glLoadIdentity();

    // Convert camera angle from degrees to radians for trigonometric functions
    float rad = cameraAngleY * M_PI / 180.0f;

    // Calculate the camera's direction vector
    float dirX = sinf(rad);
    float dirZ = -cosf(rad); // Negative because OpenGL's Z axis goes into the screen

    // Set the camera
    gluLookAt(cameraX, cameraY, cameraZ,   // Eye position
              cameraX + dirX, cameraY, cameraZ + dirZ,   // Center position
              0.0f, 1.0f, 0.0f);  // Up vector

    // Draw the Sky
    drawSky();

    // Draw Brick Wall
    drawBrickWall();

    // Draw Pillars
    drawPillars();

    // Draw Floor
    drawFloor();

    // Draw Trees
    drawTree();

    // Draw the building (light gray background)
    drawBuilding();

    // Draw all the windows in a 5x3 matrix
    drawAllWindows();

    glutSwapBuffers();
}

void drawFloor() {
    float floorSize = 10.0f; // Size of the floor (adjust as needed)
    float tileSize = 0.5f;   // Size of each tile (adjust as needed)

    glEnable(GL_DEPTH_TEST);
    glBegin(GL_QUADS);
    for (float x = -floorSize; x < floorSize; x += tileSize) {
        for (float z = -floorSize; z < floorSize; z += tileSize) {
            // Set the color to dark gray for pavement
            glColor3f(0.3f, 0.3f, 0.3f); // Dark gray

            glVertex3f(x, -1.0f, z);
            glVertex3f(x + tileSize, -1.0f, z);
            glVertex3f(x + tileSize, -1.0f, z + tileSize);
            glVertex3f(x, -1.0f, z + tileSize);
        }
    }
    glEnd();
}

